/* 
 * Copyright 2020 ZUP IT SERVICOS EM TECNOLOGIA E INOVACAO SA
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
*/

import { writeFileSync, copyFileSync } from 'fs'
import { dirname } from 'path'
import 'amd-loader'
import 'reflect-metadata'
import { getViewEngineConfig, getBeagleModuleCopyPath } from './config'
import BeagleCliError, { isBeagleCliError } from '../../errors'
import { ensureDirectoryExistence, getImportFilePath } from '../../utils/filesystem'
import { logError, logSuccess } from '../../utils/styledLogger'
import { getPackageVersion } from '../../utils/packages'
import BeagleCodeGenerationError from '../../../codegen/errors'
import { generateViewEngineCode } from '../../../codegen/compiled/beagle.module'
import { BeagleAngularConfig } from '../../../types'

function getBeagleMetadataFromExports(allExports: Record<string, any>) {
  const keys = Object.keys(allExports)
  let beagleModuleName: string | undefined
  let config: BeagleAngularConfig<any> | undefined

  keys.forEach(key => {
    config = Reflect.getMetadata('beagleConfig', allExports[key])
    if (config) beagleModuleName = key
  })

  if (!beagleModuleName) {
    throw new BeagleCliError(
      'Could not find a beagle module. Please, make sure you annotated your class with @BeagleModule',
    )
  }

  return { beagleModuleName, config: config as BeagleAngularConfig<any> }
}

function getBeagleMetadata(beagleModulePath: string) {
  let beagleFileExports: Record<string, any>

  try {
    beagleFileExports = require(beagleModulePath)
  } catch (error) {
    if (typeof error.message !== 'string') throw error
    if (error.message.startsWith('Cannot find module')) {
      throw new BeagleCliError(`Could not find the beagle module file at "${beagleModulePath}".`)
    }
    if (error.message.match('Unable to compile TypeScript')) {
      throw new BeagleCliError(`Unable to compile TypeScript, see the error below:\n\n${error.message}`)
    }
    throw error
  }

  return getBeagleMetadataFromExports(beagleFileExports)
}

export function start() {
  const viewEngineConfig = getViewEngineConfig()
  const { beagleModuleName, config } = getBeagleMetadata(viewEngineConfig.beagleModulePath)
  const beagleModuleCopyPath = getBeagleModuleCopyPath(viewEngineConfig.beagleModulePath)
  let fileContent: string

  try {
    fileContent = generateViewEngineCode({
      config,
      beagleModuleName,
      beagleModuleCopyPath: getImportFilePath(viewEngineConfig.outputPath, beagleModuleCopyPath),
      angularVersion: getPackageVersion('@angular/core'),
    })
  } catch (error) {
    if (error.name !== BeagleCodeGenerationError.name) throw error
    throw new BeagleCliError(`${error.message}. Be sure you replaced all "todos" in the boilerplate code generated by beagle init.`)
  }
  
  ensureDirectoryExistence(viewEngineConfig.outputPath)
  writeFileSync(viewEngineConfig.outputPath, fileContent)
  copyFileSync(viewEngineConfig.beagleModulePath, beagleModuleCopyPath)

  logSuccess(`Beagle module files have been successfully generated at "${dirname(viewEngineConfig.outputPath)}"!`)
}

try {
  start()
} catch (error) {
  if (!isBeagleCliError) throw error
  logError(error.message)
  process.exit(error.exitCode)
}
